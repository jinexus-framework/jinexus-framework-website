<main class="bd-masthead keep-calm-and-code-on" id="content" role="main">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-12 col-md-12 mx-auto my-5">
                <h1 class="mb-3 text-light text-center text-shadow">Documentation</h1>
            </div>
        </div>
    </div>
    <div class="cover-scrollspy"><i class="fas fa-chevron-down"></i></div>
</main>
<div class="container-fluid">
    <div class="row flex-xl-nowrap">
        <?php echo $this->render('application/documentation/partial/main-sidebar'); ?>
        <div class="d-none d-xl-block col-xl-2 bd-toc">
            <ul class="section-nav">
                <li class="toc-entry toc-h2"><a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#http">HTTP</a></li>
                <li class="toc-entry toc-h2">
                    <a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#request">Request</a>
                    <ul>
                        <li class="toc-entry toc-h3"><a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#get-data-or-query-string-data">GET Data or Query String Data</a></li>
                        <li class="toc-entry toc-h3"><a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#post-data">POST Data</a></li>
                        <li class="toc-entry toc-h3"><a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#cookie-data">Cookie Data</a></li>
                        <li class="toc-entry toc-h3"><a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#file-data">File Data</a></li>
                        <li class="toc-entry toc-h3"><a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#available-parameter-methods">Available Parameter Methods</a></li>
                        <li class="toc-entry toc-h3"><a href="<?php echo $this->url('application.documentation.walkthrough.http-request'); ?>#other-request-data">Other Request Data</a></li>
                    </ul>
                </li>
            </ul>
        </div>
        <main class="col-12 col-md-9 col-xl-8 py-md-3 pl-md-5 bd-content" role="main">
            <h1 class="bd-title" id="content">HTTP Request</h1>
            <p class="bd-lead">
                The HTTP Request provides an object oriented interface to global variables available to our disposal as well as easy access to other useful request information.
            </p>

            <p>
                We have learned how to make controller and route work, now it's time to see how the application receives HTTP request.
            </p>

            <h2 id="http">HTTP</h2>
            <p>The <span class="gi">getRequest()</span> method returns all the available object oriented interface to global variables such as $_GET, $_POST, $_FILES, $_COOKIE and $_SERVER.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'foobar'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <h2 id="request">Request</h2>
            <p>Now lets explore each ways of accessing the different kind of request data.</p>

            <h4 id="get-data-or-query-string-data">GET Data or Query String Data</h4>
            <p>The <span class="gi">getQuery()</span> method returns a parameter collection containing query string data.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>
            <span class="ni">// Returns a parameter collection containing query string data</span>
            <span class="nd">$queryString</span> <span class="o">=</span> <span class="nd">$request</span><span class="o">-></span><span class="ss">getQuery</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'foobar'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">get()</span> method of the parameter collection returns the value of a parameter and null if it doesn't exist.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="ni">// Return the value of a parameter and null if the key doesn't exist</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$queryString</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="o">)</span><span class="m">;</span>

        <span class="ni">// You can also specify a custom default return value if the key doesn't exist using the second parameter</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$queryString</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="m">, </span><span class="no">'bar'</span><span class="o">)</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <h4 id="post-data">POST Data</h4>
            <p>The <span class="gi">getPost()</span> method returns a parameter collection containing post data.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>
            <span class="ni">// Returns a parameter collection containing post data</span>
            <span class="nd">$post</span> <span class="o">=</span> <span class="nd">$request</span><span class="o">-></span><span class="ss">getPost</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'foobar'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">get()</span> method of the parameter collection returns the value of a parameter and null if it doesn't exist.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="ni">// Return the value of a parameter and null if the key doesn't exist</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$post</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="o">)</span><span class="m">;</span>

        <span class="ni">// You can also specify a custom default return value if the key doesn't exist using the second parameter</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$post</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="m">, </span><span class="no">'bar'</span><span class="o">)</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <h4 id="cookie-data">Cookie Data</h4>
            <p>The <span class="gi">getCookie()</span> method returns a parameter collection containing cookie data.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>
            <span class="ni">// Returns a parameter collection containing cookie data</span>
            <span class="nd">$cookie</span> <span class="o">=</span> <span class="nd">$request</span><span class="o">-></span><span class="ss">getCookie</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'foobar'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">get()</span> method of the parameter collection returns the value of a parameter and null if it doesn't exist.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="ni">// Return the value of a parameter and null if the key doesn't exist</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$cookie</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="o">)</span><span class="m">;</span>

        <span class="ni">// You can also specify a custom default return value if the key doesn't exist using the second parameter</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$cookie</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="m">, </span><span class="no">'bar'</span><span class="o">)</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <h4 id="file-data">File Data</h4>
            <p>The <span class="gi">getFile()</span> method returns a parameter collection containing file data.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>
            <span class="ni">// Returns a parameter collection containing file data</span>
            <span class="nd">$file</span> <span class="o">=</span> <span class="nd">$request</span><span class="o">-></span><span class="ss">getFile</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'foobar'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">get()</span> method of the parameter collection returns the value of a parameter and null if it doesn't exist.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="ni">// Return the value of a parameter and null if the key doesn't exist</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$file</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="o">)</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <h4 id="server-data">Server Data</h4>
            <p>The <span class="gi">getServer()</span> method returns a parameter collection containing server data.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>
            <span class="ni">// Returns a parameter collection containing server data</span>
            <span class="nd">$server</span> <span class="o">=</span> <span class="nd">$request</span><span class="o">-></span><span class="ss">getServer</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'foobar'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">get()</span> method of the parameter collection returns the value of a parameter and null if it doesn't exist.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="ni">// Return the value of a parameter and null if the key doesn't exist</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$server</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="o">)</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <h4 id="available-parameter-methods">Available Parameter Methods</h4>
            <p>These are the list of available parameter methods that can be use from request.</p>
            <table class="table table-hover table-responsive">
                <thead>
                    <tr>
                        <th scope="col">Method</th>
                        <th scope="col">Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td scope="row"><span class="ss">count()</span></td>
                        <td>Return the count of all parameter</td>
                    </tr>
                    <tr>
                        <td scope="row"><span class="ss">add()</span></td>
                        <td>Adds a parameter</td>
                    </tr>
                    <tr>
                        <td scope="row"><span class="ss">has()</span></td>
                        <td>Returns true if the parameter exists and false if not</td>
                    </tr>
                    <tr>
                        <td scope="row"><span class="ss">get()</span></td>
                        <td>Gets a parameter value</td>
                    </tr>
                    <tr>
                        <td scope="row"><span class="ss">remove()</span></td>
                        <td>Removes a parameter</td>
                    </tr>
                    <tr>
                        <td scope="row"><span class="ss">all()</span></td>
                        <td>Returns all the parameter</td>
                    </tr>
                    <tr>
                        <td scope="row"><span class="ss">getIterator()</span></td>
                        <td>Returns an array iterator object</td>
                    </tr>
                </tbody>
            </table>

            <h4 id="other-request-data">Other Request Data</h4>
            <p>The <span class="gi">isAjax()</span> method returns true if the request was made using AJAX and false if not.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="nd">$isAjax</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">request</span><span class="o">-></span><span class="ss">isAjax</span><span class="o">()</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">isSecure()</span> method returns true if the request was made using HTTPS and false if not.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="nd">$isSecure</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">request</span><span class="o">-></span><span class="ss">isSecure</span><span class="o">()</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">baseUrl()</span> method returns the base URL of the request.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="nd">$baseUrl</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">request</span><span class="o">-></span><span class="ss">baseUrl</span><span class="o">()</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <?php echo $this->render('application/documentation/partial/note'); ?>

            <hr>
            <nav aria-label="Documentation Navigation">
                <ul class="pagination d-inline-block float-left">
                    <li class="page-item">
                        <a class="page-link" href="<?php echo $this->url('application.documentation.walkthrough.route'); ?>" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                            <span>Previous</span>
                        </a>
                    </li>
                </ul>
                <ul class="pagination d-inline-block float-right">
                    <li class="page-item">
                        <a class="page-link" href="<?php echo $this->url('application.documentation.walkthrough.view'); ?>" aria-label="Next">
                            <span>Next</span>
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </main>
    </div>
</div>