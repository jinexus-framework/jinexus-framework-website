<main class="bd-masthead keep-calm-and-code-on" id="content" role="main">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-12 col-md-12 mx-auto my-5">
                <h1 class="mb-3 text-light text-center text-shadow">Documentation</h1>
            </div>
        </div>
    </div>
    <div class="cover-scrollspy"><i class="fas fa-chevron-down"></i></div>
</main>
<div class="container-fluid">
    <div class="row flex-xl-nowrap">
        <?php echo $this->render('application/documentation/partial/main-sidebar'); ?>
        <div class="d-none d-xl-block col-xl-2 bd-toc">
            <ul class="section-nav">
                <li class="toc-entry toc-h2">
                    <a href="<?php echo $this->url('application.documentation.walkthrough.module-manager'); ?>#module">Module</a>
                    <ul>
                        <li class="toc-entry toc-h3"><a href="<?php echo $this->url('application.documentation.walkthrough.module-manager'); ?>#create-a-new-module">Create a new Module</a></li>
                    </ul>
                </li>
            </ul>
        </div>
        <main class="col-12 col-md-9 col-xl-8 py-md-3 pl-md-5 bd-content" role="main">
            <h1 class="bd-title" id="content">Module Manager</h1>
            <p class="bd-lead">
                The Module Manager is responsible for iterating over an array of module names and triggering a sequence of instantiation of module classes, initialization, and merge configuration.
            </p>

            <h2 id="module">Module</h2>
            <p>
                By default, one module is provided with the JiNexus Framework, named "Application".
                It provides a controller to handle the "home" page of the application, the layout template, and templates for 404 and error pages, and its own configuration.
            </p>
            <p>
                Module is loaded through the help of Module Manager. You can create another module to separate other controllers and layout templates.
            </p>
            <h4 id="create-a-new-module">Create a new Module</h4>
            <p>Lets create a new module name "Blog". Below is the updated Application Structure of my project:</p>
            <figure class="highlight">
                <pre>
                    <code>
    <span class="nt">application_root/</span>
        <span class="nt">config/</span>
            <span class="nt">application.config.php</span>
            <span class="nt">modules.config.php</span>
        <span class="nt">data/</span>
        <span class="nt">module/</span>
            <span class="nt">Application/</span>
            <span class="nt">Blog/</span>
                <span class="nt">config/</span>
                    <span class="nt">module.config.php</span>
                <span class="nt">src/</span>
                    <span class="nt">Controller/</span>
                    <span class="nt">Module.php</span>
                <span class="nt">view</span>
        <span class="nt">public/</span>
            <span class="nt">asset/</span>
            <span class="nt">.htaccess</span>
            <span class="nt">index.php</span>
        <span class="nt">vendor/</span>
                    </code>
                </pre>
            </figure>

            <p>Next is you have to modify the Module.php and add the following methods. Your <span class="gi">Module.php</span> should look like this:</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">Application;</span>

    <span class="m">use</span> <span class="o">JiNexus\ModuleManager\ModuleManager\AbstractModule;</span>

    <span class="m">class</span> <span class="o">Module</span> <span class="m">extends</span> <span class="o">AbstractModule</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> mixed</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">getConfig</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="m">return include</span> <span class="nd">__DIR__</span> <span class="o">.</span> <span class="no">'/../config/module.config.php'</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>Next is we have to map our new module using PSR-4 auto loading. Your <span class="gi">composer.json</span> should look like this:</p>
            <figure class="highlight">
                <pre>
    <code>
    <span class="nd">"autoload"</span><span class="m">:</span> <span class="o">{</span>
        <span class="nd">"psr-4"</span><span class="m">:</span> <span class="o">{</span>
            <span class="nd">"Application\\"</span><span class="m">:</span> <span class="no">"module/Application/src/"</span><span class="m">,</span>
            <span class="nd">"Blog\\"</span><span class="m">:</span> <span class="no">"module/Blog/src/"</span>
        <span class="o">}</span>
    <span class="o">}</span><span class="m">,</span>
    <span class="nd">"autoload-dev"</span><span class="m">:</span> <span class="o">{</span>
        <span class="nd">"psr-4"</span><span class="m">:</span> <span class="o">{</span>
            <span class="nd">"Application\\"</span><span class="m">:</span> <span class="no">"module/Application/test/"</span><span class="m">,</span>
            <span class="nd">"Blog\\"</span><span class="m">:</span> <span class="no">"module/Blog/test/"</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>Lastly is we have to enable our new module by adding it to our <span class="gi">config/modules.config.php</span>.</p>
            <p>Your <span class="gi">modules.config.php</span> should look like this:</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="no"><i>/**</i></span>
    <span class="no"><i> * List of enabled modules for this application.</i></span>
    <span class="no"><i> * </i></span>
    <span class="no"><i> * This should be an array of module namespaces used in the application.</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">return</span> <span class="o">[</span>
        <span class="no">'Application'</span><span class="m">,</span>
        <span class="no">'Blog'</span><span class="m">,</span>
    <span class="o">]</span><span class="m">;</span>
    </code>
                </pre>
            </figure>
            <div class="alert alert-info" role="alert">
                <h5 class="alert-heading">Important Note!</h5>
                <p>
                    In <span class="gi">modules.config.php</span> all modules are loaded from top to bottom. And each module configuration are merge to one whole configuration that includes routes, view_manager, etc.
                    So if there are instances that a similar keys exist in each of your module configuration, please be aware that the latest module may overwrite the previous modules configuration.
                </p>
            </div>

            <?php echo $this->render('application/documentation/partial/note'); ?>

            <hr>
            <nav aria-label="Documentation Navigation">
                <ul class="pagination d-inline-block float-left">
                    <li class="page-item">
                        <a class="page-link" href="<?php echo $this->url('application.documentation.walkthrough.introduction'); ?>" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                            <span>Previous</span>
                        </a>
                    </li>
                </ul>
                <ul class="pagination d-inline-block float-right">
                    <li class="page-item">
                        <a class="page-link" href="<?php echo $this->url('application.documentation.walkthrough.controller'); ?>" aria-label="Next">
                            <span>Next</span>
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </main>
    </div>
</div>