<main class="bd-masthead keep-calm-and-code-on" id="content" role="main">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-12 col-md-12 mx-auto my-5">
                <h1 class="mb-3 text-light text-center text-shadow">Documentation</h1>
            </div>
        </div>
    </div>
    <div class="cover-scrollspy"><i class="fas fa-chevron-down"></i></div>
</main>
<div class="container-fluid">
    <div class="row flex-xl-nowrap">
        <?php echo $this->render('layout/partial/main-sidebar'); ?>
        <div class="d-none d-xl-block col-xl-2 bd-toc">
            <ul class="section-nav">

            </ul>
        </div>
        <main class="col-12 col-md-9 col-xl-8 py-md-3 pl-md-5 bd-content" role="main">
            <h1 class="bd-title" id="content">Introduction</h1>
            <p class="bd-lead">
                JiNexus MVC is a design pattern layer for JiNexus Framework which focuses on modularity and performance that separates business logic and presentation.
            </p>
            <p>The MVC layer is built on top of the following components:</p>
            <ul>
                <li>Module Manager - load the modules and merge the configuration</li>
                <li>Config - register and retrieves the merge configuration.</li>
                <li>Route - provides routing of a request. It matches the request to its respective controller to dispatch</li>
                <li>HTTP Request - provides an object oriented interface to global variables such as $_GET, $_POST, $_FILES, $_COOKIE and $_SERVER as well as easy access to other useful request information.</li>
            </ul>

            <h2>Application Structure</h2>
            <p>Below is the basic application structure:</p>
            <figure class="highlight">
                <pre>
                    <code>
    <span class="nt">application_root/</span>
        <span class="nt">config/</span>
            <span class="nt">application.config.php</span>
            <span class="nt">modules.config.php</span>
        <span class="nt">data/</span>
        <span class="nt">module/</span>
        <span class="nt">public/</span>
            <span class="nt">asset/</span>
            <span class="nt">.htaccess</span>
            <span class="nt">index.php</span>
        <span class="nt">vendor/</span>
                    </code>
                </pre>
            </figure>

            <h2>Module</h2>
            <p>
                By default, one module is provided with the JiNexus Framework, named "Application".
                It provides a controller to handle the "home" page of the application, the layout template, and templates for 404 and error pages, and its own configuration.
            </p>
            <p>
                Module is loaded through the help of Module Manager. You can create another module to separate other controllers and layout templates.
            </p>
            <h3>Create a new Module</h3>
            <p>Lets create a new module name "Blog". Below is the updated Application Structure of my project:</p>
            <figure class="highlight">
                <pre>
                    <code>
    <span class="nt">application_root/</span>
        <span class="nt">config/</span>
            <span class="nt">application.config.php</span>
            <span class="nt">modules.config.php</span>
        <span class="nt">data/</span>
        <span class="nt">module/</span>
            <span class="nt">Application/</span>
            <span class="nt">Blog/</span>
                <span class="nt">config/</span>
                    <span class="nt">module.config.php</span>
                <span class="nt">src/</span>
                    <span class="nt">Controller/</span>
                    <span class="nt">Module.php</span>
                <span class="nt">view</span>
        <span class="nt">public/</span>
            <span class="nt">asset/</span>
            <span class="nt">.htaccess</span>
            <span class="nt">index.php</span>
        <span class="nt">vendor/</span>
                    </code>
                </pre>
            </figure>

            <p>Next is you have to modify the Module.php and add the following methods. Your <span class="gi">Module.php</span> should look like this:</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">Application;</span>

    <span class="m">use</span> <span class="o">JiNexus\ModuleManager\ModuleManager\AbstractModule;</span>

    <span class="m">class</span> <span class="o">Module</span> <span class="m">extends</span> <span class="o">AbstractModule</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> mixed</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">getConfig</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="m">return include</span> <span class="nd">__DIR__</span> <span class="o">.</span> <span class="no">'/../config/module.config.php'</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>Next is we have to map our new module using PSR-4 auto loading. Your <span class="gi">composer.json</span> should look like this:</p>
            <figure class="highlight">
                <pre>
    <code>
    <span class="nd">"autoload"</span><span class="m">:</span> <span class="o">{</span>
        <span class="nd">"psr-4"</span><span class="m">:</span> <span class="o">{</span>
            <span class="nd">"Application\\"</span><span class="m">:</span> <span class="no">"module/Application/src/"</span><span class="m">,</span>
            <span class="nd">"Blog\\"</span><span class="m">:</span> <span class="no">"module/Blog/src/"</span><span class="m">,</span>
            <span class="nd">"JiNexus\\Config\\"</span><span class="m">:</span> <span class="no">"vendor/jinexus-framework/jinexus-config/src/"</span><span class="m">,</span>
            <span class="nd">"JiNexus\\ModuleManager\\"</span><span class="m">:</span> <span class="no">"vendor/jinexus-framework/jinexus-module-manager/src/"</span><span class="m">,</span>
            <span class="nd">"JiNexus\\Mvc\\"</span><span class="m">:</span> <span class="no">"vendor/jinexus-framework/jinexus-mvc/src/"</span><span class="m">,</span>
            <span class="nd">"JiNexus\\Route\\"</span><span class="m">:</span> <span class="no">"vendor/jinexus-framework/jinexus-route/src/"</span><span class="m">,</span>
            <span class="nd">"JiNexus\\Http\\"</span><span class="m">:</span> <span class="no">"vendor/jinexus-framework/jinexus-http/src/"</span>
        <span class="o">}</span>
    <span class="o">}</span><span class="m">,</span>
    <span class="nd">"autoload-dev"</span><span class="m">:</span> <span class="o">{</span>
        <span class="nd">"psr-4"</span><span class="m">:</span> <span class="o">{</span>
            <span class="nd">"Application\\"</span><span class="m">:</span> <span class="no">"module/Application/test/"</span><span class="m">,</span>
            <span class="nd">"Blog\\"</span><span class="m">:</span> <span class="no">"module/Blog/test/"</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>Lastly is we have to enable our new module by adding it to our <span class="gt">config/modules.config.php</span>.</p>
            <p>Your <span class="gi">modules.config.php</span> should look like this:</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="no"><i>/**</i></span>
    <span class="no"><i> * List of enabled modules for this application.</i></span>
    <span class="no"><i> * </i></span>
    <span class="no"><i> * This should be an array of module namespaces used in the application.</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">return</span> <span class="o">[</span>
        <span class="no">'Application'</span><span class="m">,</span>
        <span class="no">'Blog'</span><span class="m">,</span>
    <span class="o">]</span><span class="m">;</span>
    </code>
                </pre>
            </figure>
            <div class="alert alert-info" role="alert">
                <h5 class="alert-heading">Important Note!</h5>
                <p>
                    In <span class="gi">modules.config.php</span> all modules are loaded from top to bottom. And each module configuration are merge to one whole configuration that includes routes, view_manager, etc.
                    So if there are instances that a similar keys exist in each of your module configuration, please be aware that the latest module may overwrite the previous modules configuration.
                </p>
            </div>

            <h2>Controller</h2>
            <p>Controller is a main entry of a page, after routing. Here's a basic example controller that extends the base controller included with the framework.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'helloWorld'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>
            <div class="alert alert-info" role="alert">
                <h5 class="alert-heading">Important Note!</h5>
                <p>
                    Method names should have a suffix of a word "Action" to match it and dispatch.
                </p>
            </div>

            <h3>Route</h3>
            <p>The JiNexus Framework Route lets you map URL patterns to class methods for each module. Routes are registered in the <span class="gi">module/{Module}/config/module.config.php</span>.</p>
            <p>Here's a basic example about our routing system.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">Application\Controller\IndexController</span><span class="m">;</span>

    <span class="m">return</span> <span class="o">[</span>
        <span class="no">'routes'</span> <span class="o">=> [</span>
            <span class="no">'application.home'</span> <span class="o">=> [</span> <span class="ni">// Route name</span>
                <span class="no">'options'</span> <span class="o">=> [</span>
                    <span class="no">'route'</span> <span class="o">=></span> <span class="no">'/'</span><span class="m">,</span> <span class="ni">// Route URI</span>
                    <span class="no">'controller'</span> <span class="o">=></span> <span class="o">IndexController::</span><span class="m">class,</span> <span class="ni">// Controller to dispatch</span>
                    <span class="no">'action'</span> <span class="o">=></span> <span class="no">'index'</span> <span class="ni">// Method to dispatch</span>
                <span class="o">]</span><span class="m">,</span>
            <span class="o">]</span><span class="m">,</span>
        <span class="o">]</span>
    <span class="o">]</span><span class="m">;</span>
    </code>
                </pre>
            </figure>
            <p>As you can see the route system is very straight forward and simple. Each route has its own route name, a corresponding URI, and a controller and method to dispatch.</p>

            <h3>HTTP Request</h3>
            <p>We have learned how to make controller and route work, now it's time to see how the application receives HTTP request.</p>
            <p>The <span class="gi">getRequest()</span> method returns all the available object oriented interface to global variables such as $_GET, $_POST, $_FILES, $_COOKIE and $_SERVER.</p>

            <h4>GET Data or Query String Data</h4>
            <p>The <span class="gi">getQuery()</span> method returns a parameter collection containing query string data.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>
            <span class="ni">// Returns a parameter collection containing query string data</span>
            <span class="nd">$queryString</span> <span class="o">=</span> <span class="nd">$request</span><span class="o">-></span><span class="ss">getQuery</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'helloWorld'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">get()</span> method of the parameter collection returns the value of a parameter and null if it doesn't exist.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="ni">// Return the value of a parameter and null if the key doesn't exist</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$queryString</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="o">)</span><span class="m">;</span>

        <span class="ni">// You can also specify a custom default return value if the key doesn't exist using the second parameter</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$queryString</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="m">, </span><span class="no">'bar'</span><span class="o">)</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <h4>POST Data</h4>
            <p>The <span class="gi">getPost()</span> method returns a parameter collection containing post data.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
    <span class="m">namespace</span> <span class="o">namespace Application\Controller</span><span class="m">;</span>

    <span class="m">use</span> <span class="o">JiNexus\Mvc\Controller\AbstractController</span><span class="m">;</span>
    <span class="m">use</span> <span class="o">JiNexus\Mvc\Model\ViewModel</span><span class="m">;</span>

    <span class="no"><i>/**</i></span>
    <span class="no"><i> * Class IndexController</i></span>
    <span class="no"><i> * <u>@package</u> Application\Controller</i></span>
    <span class="no"><i> */</i></span>
    <span class="m">class</span> <span class="o">IndexController</span> <span class="m">extends</span> <span class="o">AbstractController</span>
    <span class="o">{</span>
        <span class="no"><i>/**</i></span>
        <span class="no"><i> * <u>@return</u> ViewModel</i></span>
        <span class="no"><i> */</i></span>
        <span class="m">public function</span> <span class="ss">indexAction</span><span class="o">()</span>
        <span class="o">{</span>
            <span class="ni">// Get all the available object oriented interface of global variables</span>
            <span class="nd">$request</span> <span class="o">=</span> <span class="nd">$this</span><span class="o">-></span><span class="nd">http</span><span class="o">-></span><span class="ss">getRequest</span><span class="o">()</span><span class="m">;</span>
            <span class="ni">// Returns a parameter collection containing post data</span>
            <span class="nd">$post</span> <span class="o">=</span> <span class="nd">$request</span><span class="o">-></span><span class="ss">getPost</span><span class="o">()</span><span class="m">;</span>

            <span class="ni">// Pass a variable to the view</span>
            <span class="m">return new</span> <span class="o">ViewModel([</span>
                <span class="no">'helloWorld'</span> <span class="o">=></span> <span class="no">'Hello World!'</span>
            <span class="o">])</span><span class="m">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    </code>
                </pre>
            </figure>

            <p>The <span class="gi">get()</span> method of the parameter collection returns the value of a parameter and null if it doesn't exist.</p>
            <figure class="highlight">
                <pre>
    <code class="language-php" data-lang="php">
        <span class="ni">// Return the value of a parameter and null if the key doesn't exist</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$post</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="o">)</span><span class="m">;</span>

        <span class="ni">// You can also specify a custom default return value if the key doesn't exist using the second parameter</span>
        <span class="nd">$data</span> <span class="o">=</span> <span class="nd">$post</span><span class="o">-></span><span class="ss">get</span><span class="o">(</span><span class="no">'foo'</span><span class="m">, </span><span class="no">'bar'</span><span class="o">)</span><span class="m">;</span>
    </code>
                </pre>
            </figure>

            <h2>View</h2>

            <h2>Config</h2>
        </main>
    </div>
</div>